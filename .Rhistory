source('~/gitclones/ProgrammingAssignment2/cachematrix.R')
m <- matrix(rnorm(16),4,4)
m1 <- makeCacheMatrix(m)
cacheSolve(m1)
## Return a matrix that is the inverse of 'x'
inverse <- x$getinv()
source('~/gitclones/ProgrammingAssignment2/cachematrix.R')
m <- matrix(rnorm(16),4,4)
m1 <- makeCacheMatrix(m)
cacheSolve(m1)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y){
x <<- y
inverse <<- NULL
}
get <- function() x
setInverse <- function(solveMatrix) inverse <<- solveMatrix
getInverse <- function() inverse
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
m1 <- makeCacheMatrix(m)
m <- matrix(rnorm(16),4,4)
m1 <- makeCacheMatrix(m)
cacheSolve(m1)
source('~/gitclones/ProgrammingAssignment2/cachematrix.R')
source('~/gitclones/ProgrammingAssignment2/cachematrix.R')
m <- matrix(rnorm(16),4,4)
m1 <- makeCacheMatrix(m)
cacheSolve(m1)
source('~/gitclones/ProgrammingAssignment2/cachematrix.R')
m <- matrix(rnorm(16),4,4)
m1 <- makeCacheMatrix(m)
cacheSolve(m1)
source('~/gitclones/ProgrammingAssignment2/cachematrix.R')
m <- matrix(rnorm(16),4,4)
m1 <- makeCacheMatrix(m)
cacheSolve(m1)
